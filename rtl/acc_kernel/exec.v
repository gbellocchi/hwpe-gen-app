// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module exec (
        ap_clk,
        ap_rst,
        systolic_ap_int_32_ap_int_32_ap_int_32_x_V_read,
        systolic_ap_int_32_ap_int_32_ap_int_32_x1_V_read,
        systolic_ap_int_32_ap_int_32_ap_int_32_y0_V_read,
        systolic_ap_int_32_ap_int_32_ap_int_32_y1_V_read,
        x_in_V_read,
        h_V_read,
        y_in_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [31:0] systolic_ap_int_32_ap_int_32_ap_int_32_x_V_read;
input  [31:0] systolic_ap_int_32_ap_int_32_ap_int_32_x1_V_read;
input  [31:0] systolic_ap_int_32_ap_int_32_ap_int_32_y0_V_read;
input  [31:0] systolic_ap_int_32_ap_int_32_ap_int_32_y1_V_read;
input  [31:0] x_in_V_read;
input  [4:0] h_V_read;
input  [31:0] y_in_V_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
input   ap_ce;

reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;
reg[31:0] ap_return_4;
reg[31:0] ap_return_5;

reg   [31:0] x_in_V_read_1_reg_109;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] systolic_y1_V_read_reg_114;
reg  signed [31:0] systolic_x1_V_read_reg_119;
reg   [31:0] systolic_x_V_read_reg_125;
wire   [31:0] add_ln68_fu_66_p2;
reg   [31:0] add_ln68_reg_135;
wire    ap_block_pp0_stage0;
wire   [4:0] grp_fu_72_p0;
wire   [31:0] grp_fu_72_p2;
reg    grp_fu_72_ce;
reg    ap_ce_reg;
reg   [31:0] ap_return_0_int_reg;
reg   [31:0] ap_return_1_int_reg;
reg   [31:0] ap_return_2_int_reg;
reg   [31:0] ap_return_3_int_reg;
reg   [31:0] ap_return_4_int_reg;
reg   [31:0] ap_return_5_int_reg;
wire   [31:0] grp_fu_72_p00;

fir_128_mdc_mul_5ns_32s_32_2_0 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_128_mdc_mul_5ns_32s_32_2_0_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_72_p0),
    .din1(systolic_ap_int_32_ap_int_32_ap_int_32_x1_V_read),
    .ce(grp_fu_72_ce),
    .dout(grp_fu_72_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        add_ln68_reg_135 <= add_ln68_fu_66_p2;
        systolic_x1_V_read_reg_119 <= systolic_ap_int_32_ap_int_32_ap_int_32_x1_V_read;
        systolic_x_V_read_reg_125 <= systolic_ap_int_32_ap_int_32_ap_int_32_x_V_read;
        systolic_y1_V_read_reg_114 <= systolic_ap_int_32_ap_int_32_ap_int_32_y1_V_read;
        x_in_V_read_1_reg_109 <= x_in_V_read;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_0_int_reg <= systolic_x1_V_read_reg_119;
        ap_return_1_int_reg <= systolic_y1_V_read_reg_114;
        ap_return_2_int_reg <= x_in_V_read_1_reg_109;
        ap_return_3_int_reg <= systolic_x_V_read_reg_125;
        ap_return_4_int_reg <= grp_fu_72_p2;
        ap_return_5_int_reg <= add_ln68_reg_135;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_0 = ap_return_0_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_0 = systolic_x1_V_read_reg_119;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_1 = ap_return_1_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_1 = systolic_y1_V_read_reg_114;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_2 = ap_return_2_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_2 = x_in_V_read_1_reg_109;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_3 = ap_return_3_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_3 = systolic_x_V_read_reg_125;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_4 = ap_return_4_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_4 = grp_fu_72_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_5 = ap_return_5_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_5 = add_ln68_reg_135;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        grp_fu_72_ce = 1'b1;
    end else begin
        grp_fu_72_ce = 1'b0;
    end
end

assign add_ln68_fu_66_p2 = (systolic_ap_int_32_ap_int_32_ap_int_32_y0_V_read + y_in_V_read);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign grp_fu_72_p0 = grp_fu_72_p00;

assign grp_fu_72_p00 = h_V_read;

endmodule //exec
