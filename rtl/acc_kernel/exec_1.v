// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module exec_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_in_V_TDATA,
        x_in_V_TVALID,
        x_in_V_TREADY,
        h_0_V_read,
        ap_return_0,
        ap_return_1,
        x_in_V_TDATA_blk_n,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x_in_V_TDATA;
input   x_in_V_TVALID;
output   x_in_V_TREADY;
input  [31:0] h_0_V_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output   x_in_V_TDATA_blk_n;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x_in_V_TREADY;
reg x_in_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [31:0] s_x1_V_0;
reg   [31:0] s_x_V_0;
reg   [31:0] s_y1_V_0;
reg   [31:0] s_y0_V_0;
wire    ap_CS_fsm_state2;
reg  signed [31:0] s_x1_V_0_load_reg_102;
wire   [31:0] grp_fu_44_p2;
reg    grp_fu_44_ce;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 s_x1_V_0 = 32'd0;
#0 s_x_V_0 = 32'd0;
#0 s_y1_V_0 = 32'd0;
#0 s_y0_V_0 = 32'd0;
end

fir_mul_32s_32s_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(s_x1_V_0),
    .din1(h_0_V_read),
    .ce(grp_fu_44_ce),
    .dout(grp_fu_44_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (x_in_V_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        s_x1_V_0 <= s_x_V_0;
        s_x_V_0 <= x_in_V_TDATA;
        s_y0_V_0 <= grp_fu_44_p2;
        s_y1_V_0 <= s_y0_V_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        s_x1_V_0_load_reg_102 <= s_x1_V_0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_ce) & (x_in_V_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (x_in_V_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((x_in_V_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))))) begin
        grp_fu_44_ce = 1'b1;
    end else begin
        grp_fu_44_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_in_V_TDATA_blk_n = x_in_V_TVALID;
    end else begin
        x_in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (x_in_V_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        x_in_V_TREADY = 1'b1;
    end else begin
        x_in_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_ce) & (x_in_V_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return_0 = s_x1_V_0_load_reg_102;

assign ap_return_1 = s_y1_V_0;

endmodule //exec_1
