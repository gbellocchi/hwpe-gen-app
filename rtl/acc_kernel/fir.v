// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.291000,HLS_SYN_LAT=3,HLS_SYN_TPT=4,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=1307,HLS_SYN_LUT=370,HLS_VERSION=2019_2_1}" *)

module fir_mdc (
        ap_clk,
        ap_rst_n,
        x_V_TDATA,
        x_V_TVALID,
        x_V_TREADY,
        coeff_0_V,
        coeff_1_V,
        coeff_2_V,
        coeff_3_V,
        y_V_TDATA,
        y_V_TVALID,
        y_V_TREADY
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input  [31:0] x_V_TDATA;
input   x_V_TVALID;
output   x_V_TREADY;
input  [31:0] coeff_0_V;
input  [31:0] coeff_1_V;
input  [31:0] coeff_2_V;
input  [31:0] coeff_3_V;
output  [31:0] y_V_TDATA;
output   y_V_TVALID;
input   y_V_TREADY;

reg x_V_TREADY;

 reg    ap_rst_n_inv;
reg   [31:0] s_x_V_1;
reg  signed [31:0] s_x1_V_1;
reg   [31:0] s_y0_V_1;
reg   [31:0] s_y1_V_1;
reg   [31:0] s_x_V_2;
reg  signed [31:0] s_x1_V_2;
reg   [31:0] s_y0_V_2;
reg   [31:0] s_y1_V_2;
reg   [31:0] s_x_V_3;
reg  signed [31:0] s_x1_V_3;
reg   [31:0] s_y0_V_3;
reg   [31:0] s_y1_V_3;
wire    grp_exec_1_fu_105_x_in_V_TDATA_blk_n;
reg    x_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
reg    y_V_TDATA_blk_n;
wire    ap_CS_fsm_state4;
reg  signed [31:0] s_x1_V_1_load_reg_283;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_125_p2;
reg   [31:0] mul_ln68_reg_294;
wire    ap_CS_fsm_state2;
reg  signed [31:0] s_x1_V_2_load_reg_299;
wire    grp_exec_1_fu_105_ap_start;
wire    grp_exec_1_fu_105_ap_done;
wire    grp_exec_1_fu_105_ap_idle;
wire    grp_exec_1_fu_105_ap_ready;
wire    grp_exec_1_fu_105_x_in_V_TREADY;
wire   [31:0] grp_exec_1_fu_105_ap_return_0;
wire   [31:0] grp_exec_1_fu_105_ap_return_1;
reg    grp_exec_1_fu_105_ap_ce;
reg    grp_exec_1_fu_105_ap_start_reg;
reg   [3:0] ap_NS_fsm;
wire    ap_NS_fsm_state2;
wire   [31:0] add_ln68_fu_176_p2;
wire   [31:0] grp_fu_139_p2;
wire   [31:0] add_ln68_1_fu_213_p2;
wire   [31:0] grp_fu_254_p2;
wire    regslice_both_y_V_U_apdone_blk;
wire   [31:0] add_ln68_2_fu_248_p2;
reg    grp_fu_139_ce;
reg    grp_fu_254_ce;
wire    regslice_both_x_V_U_apdone_blk;
wire   [31:0] x_V_TDATA_int;
wire    x_V_TVALID_int;
reg    x_V_TREADY_int;
wire    regslice_both_x_V_U_ack_in;
reg    y_V_TVALID_int;
wire    y_V_TREADY_int;
wire    regslice_both_y_V_U_vld_out;

// power-on initialization
initial begin
#0 s_x_V_1 = 32'd0;
#0 s_x1_V_1 = 32'd0;
#0 s_y0_V_1 = 32'd0;
#0 s_y1_V_1 = 32'd0;
#0 s_x_V_2 = 32'd0;
#0 s_x1_V_2 = 32'd0;
#0 s_y0_V_2 = 32'd0;
#0 s_y1_V_2 = 32'd0;
#0 s_x_V_3 = 32'd0;
#0 s_x1_V_3 = 32'd0;
#0 s_y0_V_3 = 32'd0;
#0 s_y1_V_3 = 32'd0;
#0 ap_CS_fsm = 4'd1;
#0 grp_exec_1_fu_105_ap_start_reg = 1'b0;
end

exec_1 grp_exec_1_fu_105(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_exec_1_fu_105_ap_start),
    .ap_done(grp_exec_1_fu_105_ap_done),
    .ap_idle(grp_exec_1_fu_105_ap_idle),
    .ap_ready(grp_exec_1_fu_105_ap_ready),
    .x_in_V_TDATA(x_V_TDATA_int),
    .x_in_V_TVALID(x_V_TVALID_int),
    .x_in_V_TREADY(grp_exec_1_fu_105_x_in_V_TREADY),
    .h_0_V_read(coeff_0_V),
    .ap_return_0(grp_exec_1_fu_105_ap_return_0),
    .ap_return_1(grp_exec_1_fu_105_ap_return_1),
    .x_in_V_TDATA_blk_n(grp_exec_1_fu_105_x_in_V_TDATA_blk_n),
    .ap_ce(grp_exec_1_fu_105_ap_ce)
);

fir_mul_32s_32s_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_3bkb_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(s_x1_V_1),
    .din1(coeff_1_V),
    .ce(1'b1),
    .dout(grp_fu_125_p2)
);

fir_mul_32s_32s_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_3bkb_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(s_x1_V_2),
    .din1(coeff_2_V),
    .ce(grp_fu_139_ce),
    .dout(grp_fu_139_p2)
);

fir_mul_32s_32s_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_3bkb_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(s_x1_V_3),
    .din1(coeff_3_V),
    .ce(grp_fu_254_ce),
    .dout(grp_fu_254_p2)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_x_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x_V_TDATA),
    .vld_in(x_V_TVALID),
    .ack_in(regslice_both_x_V_U_ack_in),
    .data_out(x_V_TDATA_int),
    .vld_out(x_V_TVALID_int),
    .ack_out(x_V_TREADY_int),
    .apdone_blk(regslice_both_x_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_y_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_y1_V_3),
    .vld_in(y_V_TVALID_int),
    .ack_in(y_V_TREADY_int),
    .data_out(y_V_TDATA),
    .vld_out(regslice_both_y_V_U_vld_out),
    .ack_out(y_V_TREADY),
    .apdone_blk(regslice_both_y_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_exec_1_fu_105_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_NS_fsm_state2))) begin
            grp_exec_1_fu_105_ap_start_reg <= 1'b1;
        end else if ((grp_exec_1_fu_105_ap_ready == 1'b1)) begin
            grp_exec_1_fu_105_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mul_ln68_reg_294 <= grp_fu_125_p2;
        s_x1_V_2 <= s_x_V_2;
        s_x1_V_2_load_reg_299 <= s_x1_V_2;
        s_x_V_2 <= s_x1_V_1_load_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if ((~((grp_exec_1_fu_105_x_in_V_TDATA_blk_n == 1'b0) | (y_V_TREADY_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        s_x1_V_1 <= s_x_V_1;
        s_x1_V_3 <= s_x_V_3;
        s_x_V_1 <= grp_exec_1_fu_105_ap_return_0;
        s_x_V_3 <= s_x1_V_2_load_reg_299;
        s_y0_V_1 <= mul_ln68_reg_294;
        s_y0_V_2 <= grp_fu_139_p2;
        s_y1_V_1 <= add_ln68_fu_176_p2;
        s_y1_V_2 <= add_ln68_1_fu_213_p2;
        s_y1_V_3 <= add_ln68_2_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        s_x1_V_1_load_reg_283 <= s_x1_V_1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((y_V_TREADY_int == 1'b0) | (regslice_both_y_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
        s_y0_V_3 <= grp_fu_254_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((y_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        grp_exec_1_fu_105_ap_ce = 1'b1;
    end else begin
        grp_exec_1_fu_105_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((grp_exec_1_fu_105_x_in_V_TDATA_blk_n == 1'b0) | (y_V_TREADY_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        grp_fu_139_ce = 1'b1;
    end else begin
        grp_fu_139_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((y_V_TREADY_int == 1'b0) | (regslice_both_y_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4)) | (~((grp_exec_1_fu_105_x_in_V_TDATA_blk_n == 1'b0) | (y_V_TREADY_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        grp_fu_254_ce = 1'b1;
    end else begin
        grp_fu_254_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_V_TDATA_blk_n = grp_exec_1_fu_105_x_in_V_TDATA_blk_n;
    end else begin
        x_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_x_V_U_ack_in == 1'b1) & (x_V_TVALID == 1'b1))) begin
        x_V_TREADY = 1'b1;
    end else begin
        x_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_V_TREADY_int = grp_exec_1_fu_105_x_in_V_TREADY;
    end else begin
        x_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        y_V_TDATA_blk_n = y_V_TREADY_int;
    end else begin
        y_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((grp_exec_1_fu_105_x_in_V_TDATA_blk_n == 1'b0) | (y_V_TREADY_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        y_V_TVALID_int = 1'b1;
    end else begin
        y_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((grp_exec_1_fu_105_x_in_V_TDATA_blk_n == 1'b0) | (y_V_TREADY_int == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((y_V_TREADY_int == 1'b0) | (regslice_both_y_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln68_1_fu_213_p2 = (s_y0_V_2 + s_y1_V_1);

assign add_ln68_2_fu_248_p2 = (s_y0_V_3 + s_y1_V_2);

assign add_ln68_fu_176_p2 = (s_y0_V_1 + grp_exec_1_fu_105_ap_return_1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_NS_fsm_state2 = ap_NS_fsm[32'd1];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_exec_1_fu_105_ap_start = grp_exec_1_fu_105_ap_start_reg;

assign y_V_TVALID = regslice_both_y_V_U_vld_out;

endmodule //fir
