// ----------------------------------------------------------------------------
//
// This file has been automatically generated by:
// Multi-Dataflow Composer tool - Platform Composer
// Template Interface Layer module - Memory-Mapped type
// on 2022/01/11 14:07:22
// More info available at http://sites.unica.it/rpct/
//
// ----------------------------------------------------------------------------
import multi_dataflow_package::*;
import hwpe_ctrl_package::*;

// ----------------------------------------------------------------------------
// Module Interface
// ----------------------------------------------------------------------------
module multi_dataflow_reconf_datapath_top 
(
	// Sink ports
	hwpe_stream_intf_stream.sink    in1,
	hwpe_stream_intf_stream.sink    in2,
	// Source ports
	hwpe_stream_intf_stream.source  out_r,
	// Algorithm parameters
		// Global signals
	input  logic                      clk_i,
	input  logic                      rst_ni
);


// ----------------------------------------------------------------------------
// Module Signals
// ----------------------------------------------------------------------------
// Communication signals
wire [31 : 0] in1_data;
wire in1_push;
wire in1_full;
wire [31:0] stream_if_in1_data;
wire stream_if_in1_valid;
wire stream_if_in1_ready;
wire [31 : 0] in2_data;
wire in2_push;
wire in2_full;
wire [31:0] stream_if_in2_data;
wire stream_if_in2_valid;
wire stream_if_in2_ready;
wire [31 : 0] out_r_data;
wire out_r_push;
wire out_r_full;
wire [31:0] stream_if_out_r_data;
wire stream_if_out_r_valid;
wire stream_if_out_r_ready;


// ----------------------------------------------------------------------------
// Body
// ----------------------------------------------------------------------------
// hwpe strem interface wrappers
// hwpe stream intf in in1
interface_wrapper_in i_interface_wrapper_in_in1(
	.in_data(stream_if_in1_data),
	.in_valid(stream_if_in1_valid),
	.in_ready(stream_if_in1_ready),
	.in(in1)
);
// hwpe stream intf in in2
interface_wrapper_in i_interface_wrapper_in_in2(
	.in_data(stream_if_in2_data),
	.in_valid(stream_if_in2_valid),
	.in_ready(stream_if_in2_ready),
	.in(in2)
);
// hwpe stream intf out out_r
interface_wrapper_out i_interface_wrapper_out_out_r(
	.out_data(stream_if_out_r_data),
	.out_valid(stream_if_out_r_valid),
	.out_ready(stream_if_out_r_ready),
	.out(out_r)
);

// Multi-Dataflow Reconfigurable Datapath
// ----------------------------------------------------------------------------
// to adapt profiling
multi_dataflow reconf_dpath (
	// Multi-Dataflow Input(s)
	.in1_data(in1_data),
	.in1_wr(in1_push),
	.in1_full(in1_full),
	.in2_data(in2_data),
	.in2_wr(in2_push),
	.in2_full(in2_full),
	// Multi-Dataflow Output(s)
	.out_r_data(out_r_data),
	.out_r_wr(out_r_push),
	.out_r_full(out_r_full),
	// Algorithm parameters
	.clock(clk_i),
	.reset(rst_ni)
);
assign stream_if_in1_ready = ~in1_full;
assign in1_data = stream_if_in1_data;
assign in1_push = stream_if_in1_valid;
assign stream_if_in2_ready = ~in2_full;
assign in2_data = stream_if_in2_data;
assign in2_push = stream_if_in2_valid;
assign stream_if_out_r_valid = out_r_push;
assign stream_if_out_r_data = out_r_data;
assign out_r_full = stream_if_out_r_ready;

endmodule
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
