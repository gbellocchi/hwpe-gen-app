// ----------------------------------------------------------------------------
//
// This file has been automatically generated by:
// Multi-Dataflow Composer tool - Platform Composer
// Template Interface Layer module - Memory-Mapped type
// on 2022/04/29 11:36:55
// More info available at http://sites.unica.it/rpct/
//
// ----------------------------------------------------------------------------
import multi_dataflow_package::*;
import hwpe_ctrl_package::*;

// ----------------------------------------------------------------------------
// Module Interface
// ----------------------------------------------------------------------------
module multi_dataflow_reconf_datapath_top 
(
	// Sink ports
	hwpe_stream_intf_stream.sink    text,
	hwpe_stream_intf_stream.sink    key,
	hwpe_stream_intf_stream.sink    rc,
	// Source ports
	hwpe_stream_intf_stream.source  chiped_text,
	// Algorithm parameters
		// Global signals
	input  logic                      clk_i,
	input  logic                      rst_ni
);


// ----------------------------------------------------------------------------
// Module Signals
// ----------------------------------------------------------------------------
// Communication signals
wire [7 : 0] text_data;
wire text_push;
wire text_full;
wire [31:0] stream_if_text_data;
wire stream_if_text_valid;
wire stream_if_text_ready;
wire [7 : 0] key_data;
wire key_push;
wire key_full;
wire [31:0] stream_if_key_data;
wire stream_if_key_valid;
wire stream_if_key_ready;
wire [7 : 0] rc_data;
wire rc_push;
wire rc_full;
wire [31:0] stream_if_rc_data;
wire stream_if_rc_valid;
wire stream_if_rc_ready;
wire [7 : 0] chiped_text_data;
wire chiped_text_push;
wire chiped_text_full;
wire [31:0] stream_if_chiped_text_data;
wire stream_if_chiped_text_valid;
wire stream_if_chiped_text_ready;


// ----------------------------------------------------------------------------
// Body
// ----------------------------------------------------------------------------
// hwpe strem interface wrappers
// hwpe stream intf in text
interface_wrapper_in i_interface_wrapper_in_text(
	.in_data(stream_if_text_data),
	.in_valid(stream_if_text_valid),
	.in_ready(stream_if_text_ready),
	.in(text)
);
// hwpe stream intf in key
interface_wrapper_in i_interface_wrapper_in_key(
	.in_data(stream_if_key_data),
	.in_valid(stream_if_key_valid),
	.in_ready(stream_if_key_ready),
	.in(key)
);
// hwpe stream intf in rc
interface_wrapper_in i_interface_wrapper_in_rc(
	.in_data(stream_if_rc_data),
	.in_valid(stream_if_rc_valid),
	.in_ready(stream_if_rc_ready),
	.in(rc)
);
// hwpe stream intf out chiped_text
interface_wrapper_out i_interface_wrapper_out_chiped_text(
	.out_data(stream_if_chiped_text_data),
	.out_valid(stream_if_chiped_text_valid),
	.out_ready(stream_if_chiped_text_ready),
	.out(chiped_text)
);

// Multi-Dataflow Reconfigurable Datapath
// ----------------------------------------------------------------------------
// to adapt profiling
multi_dataflow reconf_dpath (
	// Multi-Dataflow Input(s)
	.text_data(text_data),
	.text_wr(text_push),
	.text_full(text_full),
	.key_data(key_data),
	.key_wr(key_push),
	.key_full(key_full),
	.rc_data(rc_data),
	.rc_wr(rc_push),
	.rc_full(rc_full),
	// Multi-Dataflow Output(s)
	.chiped_text_data(chiped_text_data),
	.chiped_text_wr(chiped_text_push),
	.chiped_text_full(chiped_text_full),
	// Algorithm parameters
	.clock(clk_i),
	.reset(rst_ni)
);
assign stream_if_text_ready = ~text_full;
assign text_data = stream_if_text_data [7 : 0];
assign text_push = stream_if_text_valid;
assign stream_if_key_ready = ~key_full;
assign key_data = stream_if_key_data [7 : 0];
assign key_push = stream_if_key_valid;
assign stream_if_rc_ready = ~rc_full;
assign rc_data = stream_if_rc_data [7 : 0];
assign rc_push = stream_if_rc_valid;
assign stream_if_chiped_text_valid = chiped_text_push;
assign stream_if_chiped_text_data = {{24{1'b0}},chiped_text_data};
assign chiped_text_full = ~stream_if_chiped_text_ready;

endmodule
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
